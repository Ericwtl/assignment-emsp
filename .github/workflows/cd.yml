name: CD to EC2

on:
  on:
    push:
      branches: [ master ]
#  workflow_run:
#    workflows: ["CI Pipeline"]
#    types:
#      - completed

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: build-and-test
    # 配置AWS凭证（使用Secret中存储的IAM访问密钥）
    steps:
      # 下载CI构建的镜像
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::591098699673:role/GitHubActions-EC2-Deploy-Role
#          arn:aws:iam::591098699673:oidc-provider/token:actions:githubusercontent.com
          aws-region: ap-northeast-1

      # 登录到ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ap-northeast-1  # 明确指定ECR区域

      - name: Verify Permissions
        run: |
          aws ecr describe-repositories --region ap-northeast-1
          aws ec2 describe-instances --region ap-northeast-1
          aws ec2-instance-connect send-ssh-public-key \
            --region ap-northeast-1 \
            --instance-id i-0a4edfafee7b5376c \
            --availability-zone ap-northeast-1 \
            --instance-os-user ubuntu \
            --ssh-public-key "${{ secrets.SSH_PRIVATE_KEY }}"

      # 获取ECR仓库URI
      - name: Get ECR repository URI
        id: get-ecr-repo
        run: |
          echo "repository_uri=$(aws ecr describe-repositories --repository-names myapp --query 'repositories[0].repositoryUri' --output text)" >> $GITHUB_OUTPUT
        shell: bash

      # 标记和推送镜像
      - name: Push Docker image
        run: |
          if [ ! -f "image.tar" ]; then
            echo "::error::Docker image file 'image.tar' not found"
            exit 1
          fi
          docker load --input image.tar
          
          if ! docker image inspect myapp:${{ github.sha }} &> /dev/null; then
            echo "::error::Failed to load Docker image"
            exit 1
          fi
          
          docker tag myapp:${{ github.sha }} ${{ steps.get-ecr-repo.outputs.repository_uri }}:${{ github.sha }}
          docker push ${{ steps.get-ecr-repo.outputs.repository_uri }}:${{ github.sha }}


      - name: Get RDS Endpoint
        id: rds
        run: |
          ENDPOINT=$(aws rds describe-db-instances --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "DB_ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT

      # 设置SSH密钥
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        # 添加密钥约束（非必需但推荐）
          key-fingerprint: ${{ secrets.SSH_KEY_FINGERPRINT }}

      - name: Test SSH Connection
        run: |
          ssh -T -o StrictHostKeyChecking=no \
              ubuntu@${{ secrets.EC2_INSTANCE_IP }} "echo 'SSH connection successful!'"

      # 部署到EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
              ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'ENDSSH'
            aws ecr get-login-password --region ap-northeast-1 | docker login \
                --username AWS \
                --password-stdin ${{ steps.get-ecr-repo.outputs.repository_uri }}
          
            timeout 30 docker stop myapp-container || true
            docker rm myapp-container || true
          
            docker run -d \
              --name myapp-container \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://${{ steps.rds.outputs.DB_ENDPOINT }}/emsp-db \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASS }} \
              -p 80:8080 \
              --health-cmd="curl -f http://localhost:8080/health || exit 1" \
              --health-interval=5s \
              --health-retries=3 \
              ${{ steps.get-ecr-repo.outputs.repository_uri }}:${{ github.sha }}
          
              sleep 10
              CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' myapp-container)
              if [ "$CONTAINER_STATUS" != "running" ]; then
              echo "::error::Container failed to start!"
              docker logs myapp-container
              exit 1
              fi
          ENDSSH