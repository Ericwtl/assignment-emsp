name: CD to EC2

on:
#  push:
#    branches: [ master ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    # 配置AWS凭证（使用Secret中存储的IAM访问密钥）
    steps:
      # 下载CI构建的镜像
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          run-id: ${{ github.event.workflow_run.id }}
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::591098699673:role/GitHubActions-EC2-Deploy-Role
          #arn:aws:iam::591098699673:oidc-provider/token:actions:githubusercontent.com
          aws-region: ap-northeast-1
          mask-aws-account-id: no  # 调试用

      - name: Validate AWS credentials
        run: |
          aws sts get-caller-identity

      # 登录到ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          region: ap-northeast-1  # 明确指定ECR区域

      - name: Verify Permissions
        run: |
          aws ecr describe-repositories --region ap-northeast-1
          aws ec2 describe-instances --region ap-northeast-1
          aws ec2-instance-connect send-ssh-public-key \
            --region ap-northeast-1 \
            --instance-id i-0a4edfafee7b5376c \
            --availability-zone ap-northeast-1c \
            --instance-os-user ubuntu \
            --ssh-public-key "${{ secrets.SSH_PUBLIC_KEY }}"

      - name: Create ECR repository if missing
        run: |
          if ! aws ecr describe-repositories --repository-names myapp --region ap-northeast-1 > /dev/null 2>&1; then
            echo "Creating repository 'myapp'..."
            aws ecr create-repository --repository-name myapp --region ap-northeast-1
          fi

      # 获取ECR仓库URI
      - name: Get ECR repository URI
        id: get-ecr-repo
        run: |
          echo "repository_uri=$(aws ecr describe-repositories --repository-names myapp --query 'repositories[0].repositoryUri' --output text)" >> $GITHUB_OUTPUT
        shell: bash

      # 标记和推送镜像
      - name: Push Docker image
        run: |
          if [ ! -f "image.tar" ]; then
            echo "::error::Docker image file 'image.tar' not found"
            exit 1
          fi
          docker load --input image.tar
          
          if ! docker image inspect myapp:${{ github.sha }} &> /dev/null; then
            echo "::error::Failed to load Docker image"
            exit 1
          fi
          
          docker tag myapp:${{ github.sha }} ${{ steps.get-ecr-repo.outputs.repository_uri }}:${{ github.sha }}
          docker push ${{ steps.get-ecr-repo.outputs.repository_uri }}:${{ github.sha }}

      - name: Get RDS Endpoint
        id: rds
        run: |
          ENDPOINT=$(aws rds describe-db-instances --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "DB_ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT

      # 设置SSH密钥
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        # 添加密钥约束（非必需但推荐）
          key-fingerprint: ${{ secrets.SSH_KEY_FINGERPRINT }}

      - name: Test SSH Connection
        run: |
          ssh -T -o StrictHostKeyChecking=no \
              ubuntu@${{ secrets.EC2_INSTANCE_IP }} "echo 'SSH connection successful!'"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
              ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'ENDSSH'
            export AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}"
            export AWS_SESSION_TOKEN="${{ env.AWS_SESSION_TOKEN }}"
            export AWS_REGION="ap-northeast-1"
            
            echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:6}***"
            echo "AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:0:6}***"
          
            echo "AWS 凭证验证:"
            aws sts get-caller-identity
  
            if ! groups ubuntu | grep -q '\bdocker\b'; then
              echo "add docker group..."
              sudo usermod -aG docker ubuntu
              newgrp docker
              sudo systemctl restart docker
            fi
          
            REPO_URI="${{ steps.get-ecr-repo.outputs.repository_uri }}"
          
            echo "login ECR: $REPO_URI"
            
            aws ecr get-login-password --region ap-northeast-1 | \
              docker login --username AWS --password-stdin $REPO_URI
          
            if [[ $? -ne 0 ]]; then
              echo "::error::ECR login failed"
              exit 1
            fi
          
            EXISTING_CONTAINER=$(docker ps -a -q -f name=myapp-container)
            if [ ! -z "$EXISTING_CONTAINER" ]; then
              echo "stop and delete old container..."
              docker stop $EXISTING_CONTAINER || true
              docker rm $EXISTING_CONTAINER || true
            fi
          
            IMAGE_REF="$REPO_URI:${{ github.sha }}"
            echo "start container: $IMAGE_REF"
          
            docker run -d \
              --name myapp-container \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://${{ steps.rds.outputs.DB_ENDPOINT }}/emsp-db \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASS }} \
              -p 80:8080 \
              $IMAGE_REF
          
            echo "waiting started..."
            sleep 10
          docker logs myapp-container > container.log
          cat container.log
          
          for i in {1..5}; do
              CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' myapp-container 2>/dev/null || echo "not-found")
              if [ "$CONTAINER_STATUS" = "running" ]; then
                echo "✅ Docker is running."
                break
              fi
              echo "container status: $CONTAINER_STATUS (retry $i/5)"
              sleep 5
            done
          
            if [ "$CONTAINER_STATUS" != "running" ]; then
              echo "::error::container start failed! final status: $CONTAINER_STATUS"
              docker logs myapp-container || true
              exit 1
            fi
          ENDSSH