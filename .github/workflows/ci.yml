name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request: # 添加 pull_request 触发器
    branches: [master]

jobs:
  build-and-test:
    permissions:
      checks: write
      actions: read
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Java环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # 缓存Maven依赖，加速构建
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 编译和单元测试
      - name: Build and test
        run: mvn clean verify  # 这是最佳选择，后面有解释
        # 如果想在测试失败时看到详细日志:
        # run: mvn -B clean verify --no-transf

      # === 单一构建步骤代替重复构建 ===
      - name: Build, test and package
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent verify package -DfinalName=app

        # 添加性能优化参数
        env:
          MAVEN_OPTS: >
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
            -Dmaven.artifact.threads=10

      # === JAR 文件验证合并 ===
      - name: Verify build artifacts
        run: |
          echo "Build artifacts:"
          ls -la target
          
          if [ ! -f target/app.jar ]; then
            echo "::error::Main JAR file not found!"
            exit 1
          fi
          
          if [ -z "$(ls -A target/surefire-reports/*.xml 2>/dev/null)" ]; then
            echo "::warning::No test reports found"
          else
            echo "Test reports found"
          fi
          
          # 验证覆盖率报告
          if [ ! -d target/site/jacoco ]; then
            echo "::error::Coverage report not generated!"
            exit 1
          fi


      # 添加测试报告
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always() # 即使测试失败也生成报告
        with:
          name: Maven Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # 确保先运行测试 (JaCoCo 依赖测试结果)
#      - name: Run tests with coverage
#        run: mvn clean test

        # 代码覆盖率报告
#      - name: Generate Coverage Report
#        run: |
#          mvn org.jacoco:jacoco-maven-plugin:report
#
#      - name: Verify Coverage Report
#        run: |
#            echo "Coverage report location:"
#            ls -la target/site/jacoco/

#            # 如果使用 SonarQube/JaCoCo
#            echo "SonarQube 使用的覆盖率文件:"
#            ls -la target/jacoco.exec
      # 代码质量检查示例
#      - name: Run SonarCloud
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 添加验证步骤，确保 JAR 文件存在
#      - name: Verify JAR exists
#        run: |
#          echo "Listing target directory:"
#          ls -la target
#          test -f target/app.jar || exit 1

      # === Docker 构建阶段优化 ===
      - name: Build Docker image
        if: success()  # 只有所有步骤成功才构建
        run: |
          echo "Building Docker image..."
          docker build -t myapp:${{ github.sha }} .
          
          docker run --rm myapp:${{ github.sha }} --version

        # 添加构建上下文信息
        env:
          DOCKER_BUILDKIT: 1  # 激活BuildKit

      - name: Save Docker image
        if: success()  # 在构建成功后保存
        run: |
          docker save myapp:${{ github.sha }} -o image.tar
          ls -lh image.tar

      - name: Upload Docker artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1  # 减少存储占用