name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request: # 添加 pull_request 触发器
    branches: [master]

jobs:
  build-and-test:
    permissions:
      checks: write
      actions: read
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Java环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # 缓存Maven依赖，加速构建
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 确保JAR生成
      - name: Build project
        run: mvn clean package -DfinalName=app

      # 验证JAR存在
      - name: Verify JAR file
        run: |
          echo "Generated JAR files:"
          ls -l target/*.jar
          [ -f target/assignment-0.0.1-SNAPSHOT.jar ] || (echo "JAR not found!"; exit 1)

      # 显示JAR文件路径信息
      - name: Debug JAR location
        run: |
          echo "Current directory: $(pwd)"
          echo "JAR file path: $(realpath target/app.jar)"
          du -sh target/app.jar

      # 编译和单元测试 - 使用package而非install
      - name: Build and test
        run: mvn clean verify  # 这是最佳选择，后面有解释
        # 如果想在测试失败时看到详细日志:
        # run: mvn -B clean verify --no-transf

      # 添加测试报告
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always() # 即使测试失败也生成报告
        with:
          name: Maven Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit

      # 确保先运行测试 (JaCoCo 依赖测试结果)
      - name: Run tests with coverage
        run: mvn clean test

        # 代码覆盖率报告
      - name: Generate Coverage Report
        run: |
          mvn org.jacoco:jacoco-maven-plugin:report

      - name: Verify Coverage Report
        run: |
            echo "Coverage report location:"
            ls -la target/site/jacoco/

#            # 如果使用 SonarQube/JaCoCo
#            echo "SonarQube 使用的覆盖率文件:"
#            ls -la target/jacoco.exec
      # 代码质量检查示例
#      - name: Run SonarCloud
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 添加验证步骤，确保 JAR 文件存在
      - name: Verify JAR exists
        run: |
          echo "Listing target directory:"
          ls -la target
          test -f target/app.jar || exit 1

      # Docker 构建（添加依赖检测，确保镜像存在）
      - name: Build Docker image
        id: docker-build
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            docker build -t myapp:${{ github.sha }} .
          else
            echo "test failed,skip the docker build."
            exit 1
          fi

      - name: Save Docker image
        if: steps.docker-build.outcome == 'success'
        run: docker save myapp:${{ github.sha }} -o image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar