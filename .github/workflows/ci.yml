name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request: # 添加 pull_request 触发器
    branches: [master]

jobs:
  build-and-test:
    permissions:
      checks: write
      actions: read
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Java环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          settings-path: ${{ github.workspace }}

      # 缓存Maven依赖，加速构建
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # === 修复JAR文件名问题 ===
      - name: Build, test and package
        id: build-package
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent verify package
          
          JAR_FILE=$(find target -name "*.jar" -not -name "*.original" -print -quit)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV
          echo "Generated JAR: ${JAR_FILE}"
        env:
          MAVEN_OPTS: >
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
            -Dmaven.artifact.threads=10

      # === JAR 文件验证合并 ===
      - name: Verify build artifacts
        run: |
          echo "Build artifacts:"
          ls -la target
          
          if [ ! -f "${{ env.JAR_FILE }}" ]; then
            echo "::error::Main JAR file not found at ${{ env.JAR_FILE }}!"
            exit 1
          fi
          
          cp "${{ env.JAR_FILE }}" target/app.jar
          echo "Copied ${{ env.JAR_FILE }} to target/app.jar"
          
          if [ -z "$(ls -A target/surefire-reports/*.xml 2>/dev/null)" ]; then
            echo "::warning::No test reports found"
          else
            echo "Test reports found"
          fi
          
          if [ ! -d target/site/jacoco ]; then
            echo "::error::Coverage report not generated!"
            exit 1
          fi

      # === Docker构建准备 ===
#      - name: Prepare Docker context
#        run: |
#          # 创建专门用于Docker的目录
#          mkdir -p docker-context
#          cp target/app.jar docker-context/
#          echo "Docker context contents:"
#          ls -l docker-context

      # 添加测试报告
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always() # 即使测试失败也生成报告
        with:
          name: Maven Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start PostgreSQL for migrations
        run: |
          docker network create app-net
          docker run -d --name ci-db \
            --network app-net \
            -e POSTGRES_DB=emsp_db \
            -e POSTGRES_USER=emsp \
            -e POSTGRES_PASSWORD=emsp123 \
            -p 5432:5432 \
            postgres:15-alpine
          
          # 增强等待逻辑（重试机制）
          for i in {1..10}; do
            if docker run --rm --network container:ci-db \
              postgres:15-alpine pg_isready -U emsp -h localhost; then
              echo "Database ready after $i attempts"
              break
            else
              echo "Database not ready, retrying ($i/10)..."
              sleep 3
            fi
          done

      # Docker 构建和迁移执行
      - name: Build and run with migrations
        run: |
          docker build -t myapp:${{ github.sha }} .
          
          docker run -d --rm \
            --name ci-app \
            --network container:ci-db \
            --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
            --health-interval=1s \
            --health-timeout=3s \
            --health-retries=10 \
            -e SPRING_PROFILES_ACTIVE=ci \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/emsp_db \
            -e SPRING_DATASOURCE_USERNAME=emsp \
            -e SPRING_DATASOURCE_PASSWORD=emsp123 \
            myapp:${{ github.sha }} &
          echo "等待应用启动完成..."
          docker inspect --format='{{.State.Health.Status}}' ci-app | grep "healthy" || true
          sleep 3
          echo "停止应用容器..."
          docker stop ci-app
          
          docker exec ci-db psql -U emsp -d emsp_db -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public'"

      # 清理临时数据库
      - name: Cleanup temporary DB
        if: always()
        run: docker rm -f ci-db

      # === Docker 构建阶段优化 ===
      - name: Save Docker image
        # 添加构建上下文信息
        if: success()  # 在构建成功后保存
        env:
          DOCKER_BUILDKIT: 1  # 激活BuildKit
        run: |
          docker save myapp:${{ github.sha }} -o image.tar
          ls -lh image.tar

      - name: Upload Docker artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1  # 减少存储占用